clear all;
close all;

t = [0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,13,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,31,32,32,32,32,32,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,38,38,38,38,38,38,38,38,40,40,41,41,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,51,51,51,51,51,51,51,51,51,54,55,55,55,55,55,55,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,60,61,61,61,61,61,61,61,61,61,62,63,63,63,63,64,64,64,64,64,64,64,64,64,64,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,74,74,74,74,74,77,78,79,79,79,80,80,80,80,80,80,80,80,80,81,84,84,84,84,84,84,86,86,86,86,86,86,86,86,87,87,87,87,94,94,94,94,94,94,94,94,94,95,95,97,97,97,97,97,97,97,97,97,97,97,100,100,100,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,107,107,107,107,107,107,107,108,108,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,122];
o = [38,39,40,41,44,45,46,66,13,15,20,22,24,25,27,29,33,35,38,40,41,43,45,47,50,54,57,58,60,62,66,67,68,69,71,72,74,76,78,81,21,34,38,50,52,54,56,8,85,88,92,19,32,19,32,37,49,53,19,29,32,37,45,49,53,62,76,83,86,9,5,97,38,50,52,54,56,8,25,26,27,41,42,43,58,59,60,66,67,68,69,72,73,74,81,29,62,13,15,27,29,32,36,38,40,42,44,46,49,51,53,55,57,59,72,73,76,78,79,82,83,74,18,21,23,32,34,37,41,45,50,54,58,79,8,83,87,91,76,35,48,76,79,83,31,35,48,77,81,17,20,31,35,48,61,76,85,9,5,18,21,23,32,34,78,8,82,27,29,71,74,13,19,21,23,25,27,29,31,33,43,44,45,51,53,54,56,58,6,69,71,74,75,76,18,38,52,64,70,84,86,89,91,26,19,35,42,61,68,73,35,51,61,68,16,27,34,35,46,51,58,61,68,77,82,85,88,26,35,61,0,0,26,34,38,52,64,86,89,91,0,54,55,56,6,13,36,37,39,40,58,62,63,65,66,10,12,13,15,17,25,27,29,31,33,36,38,40,42,47,6,70,71,77,78,84,85,89,11,21,25,46,48,43,36,10,24,47,10,17,20,24,27,34,44,47,49,43,11,21,25,34,43,48,13,14,15,6,70,78,84,89,17,69,77,85,11,13,23,25,34,71,72,86,87,73,88,12,18,24,30,35,40,48,56,6,8,91,36,42,50,10,15,22,27,36,42,50,53,10,15,22,27,34,36,42,50,53,10,15,22,27,34,36,43,5,51,53,60,75,90,15,27,36,53,18,30,35,56,6,8,91,0,97,16,17,19,20,28,29,31,32,37,38,40,41,42,45,46,48,49,50,54,56,57,58,70,73,85,88,45];
x = [t;o];
N = length(x); % Total number of coordinates
D = zeros(N,N); % Creating distance matrix of N*N

% generating matrix
for i=1:N-1
    for j=i+1:N
        D(i,j)=norm(x(:,i)-x(:,j));
        D(j,i)=D(i,j);
    end
end


s = randperm(N); % Initial solution
sinit = s;
distance = tour_calculation(s,D); % calculating distance
d_list = distance; p_list = [];
factor = 10; 
epochs = 100000;
for i=1:epochs
     id = randperm(N,2);
     id = sort(id);
     snext = s;

     snext(id(1):id(2))=s(id(2):-1:id(1));% Swapping

     distance_next = tour_calculation(snext,D);
     E = distance-distance_next; % to check for minimum direction
     T = factor/(i);
     prob = 1/(1+exp(-E/T));
     %pE = exp(-E/(T));
     if E>0 
         s = snext;
     else
         ra = rand;
          if ra < prob 
                s = snext;
          end
     end
     distance = tour_calculation(s,D);
     d_list = [d_list, distance];
     p_list = [p_list, prob];
 

 
end 


% plotting graphs for Inital path and Path found by simulated annealing
x0=10;
y0=10;
width=1200;
height=400;
set(gcf,'position',[x0,y0,width,height])

figure(1);
subplot(1,2,1);
axis([0 1 0 1]);plot(x(1,[sinit sinit(1)]),x(2,[sinit sinit(1)]),'-o')
title('Initial Path')
xlabel('x-axis')
ylabel('y-axis')
legend('Connecting paths');
subplot(1,2,2);
axis([0 1 0 1]);



plot(x(1,[s s(1)]),x(2,[s s(1)]),'-o',x(1,s(1)),x(2,s(1)),'r-*');
title('Path after Simulated Annealing algo applied');
xlabel('x-axis');
ylabel('y-axis');
legend('Connecting paths','Start Node');

% Distance calculation / path cost for a tour s
% function for tour calculation
function [dis] = tour_calculation(s,D)
    [N,M] = size(D);
    dis = 0;
    for i=1:N-1
     dis = dis + D(s(i),s(i+1));
    end
    dis = dis + D(s(N),s(1));
end